from playwright.sync_api import sync_playwright
import time
import random
import json

# your existing list of nouns‚Ä¶
nouns = [
    # English
    "time", "year", "people", "way", "day", "man", "thing", "woman", "life", "child",
    "world", "school", "state", "family", "student", "group", "country", "problem", "hand", "part",
    
    # Spanish
    "tiempo", "a√±o", "d√≠a", "persona", "hombre", "mujer", "mano", "parte", "pa√≠s", "lugar",
    "trabajo", "vida", "momento", "forma", "caso", "grupo", "problema", "punto", "gobierno", "empresa",
    
    # French
    "temps", "homme", "fa√ßon", "gens", "vie", "jour", "travail", "appel", "nuit", "maison",
    "pens√©e", "argent", "nom", "p√®re", "mec", "place", "femme", "enfant", "monde", "√©cole",
    
    # Chinese (Simplified)
    "‰∫∫", "‰∫ã", "Êó∂Èó¥", "ÊúãÂèã", "Â≠©Â≠ê", "‰∏≠ÂõΩ", "ÂÆ∂", "Â≠¶Áîü", "ÈóÆÈ¢ò", "Áî∑‰∫∫",
    "Â•≥‰∫∫", "Â≠¶Ê†°", "Â∑•‰Ωú", "Èí±", "‰∏ñÁïå", "‰π¶", "ÁîüÊ¥ª", "Ê∞¥", "ÂõΩÂÆ∂", "ËÄÅÂ∏à",
    
    # Japanese
    "‰∫∫", "Â≠ê‰æõ", "Â§ß‰∫∫", "Áî∑", "Â•≥", "ÁîüÊ¥ª", "ÂèãÈÅî", "ÂÆ∂Êóè", "Â≠¶Áîü", "ÂÖàÁîü",
    "Á§æÂì°", "Â≠¶Ê†°", "‰ºöÁ§æ", "ÈßÖ", "Á©∫Ê∏Ø", "ÂÆ∂", "„Ç¢„Éë„Éº„Éà", "Ëªä", "ÈõªËªä", "ÊôÇÈñì",
    
    # Hindi
    "‡§®‡§æ‡§Æ", "‡§ò‡§∞", "‡§∏‡§Æ‡§Ø", "‡§Æ‡§®‡•Å‡§∑‡•ç‡§Ø", "‡§™‡•Å‡§∏‡•ç‡§§‡§ï", "‡§¶‡§ø‡§®", "‡§∞‡§æ‡§§", "‡§∏‡§™‡•ç‡§§‡§æ‡§π", "‡§Æ‡§π‡•Ä‡§®‡§æ", "‡§∏‡§æ‡§≤",
    "‡§∂‡§π‡§∞", "‡§ó‡§æ‡§Ç‡§µ", "‡§¶‡•á‡§∂", "‡§ú‡§≤", "‡§Ö‡§®‡•ç‡§®", "‡§Ü‡§¶‡§Æ‡•Ä", "‡§î‡§∞‡§§", "‡§¨‡§ö‡•ç‡§ö‡§æ", "‡§™‡§ø‡§§‡§æ", "‡§Æ‡§æ‡§§‡§æ",
    
    # Korean
    "ÏÇ¨Îûå", "Í≤É", "ÏãúÍ∞Ñ", "ÎÇ†", "Ïßë", "Îàà", "ÏÉùÍ∞Å", "ÏïÑÏù¥", "ÎÖÑ", "ÏÇ¨Îûë",
    "ÏπúÍµ¨", "Îßê", "ÌïôÍµê", "Ïùº", "Î™∏", "ÎßàÏùå", "ÏÑ∏ÏÉÅ", "Î¨∏Ï†ú", "ÏóÑÎßà", "ÏïÑÎπ†",
    
    # Russian
    "—á–µ–ª–æ–≤–µ–∫", "–¥—Ä—É–≥", "—Ä–µ–±—ë–Ω–æ–∫", "–∂–µ–Ω—â–∏–Ω–∞", "–º—É–∂—á–∏–Ω–∞", "–≤—Ä–µ–º—è", "–≥–æ–¥", "–¥–µ–Ω—å", "–¥–µ–ª–æ", "—Ä—É–∫–∞",
    "–≥–ª–∞–∑", "–∂–∏–∑–Ω—å", "–≥–æ–ª–æ–≤–∞", "–¥–æ–º", "—Å–ª–æ–≤–æ", "–º–µ—Å—Ç–æ", "–ª–∏—Ü–æ", "—Å—Ç–æ—Ä–æ–Ω–∞", "–Ω–æ–≥–∞", "—Ä–∞–±–æ—Ç–∞",
    
    # Arabic
    "ÿßŸÑŸÑŸá", "ŸÉÿ™ÿßÿ®", "ÿ±ÿ¨ŸÑ", "ÿßŸÖÿ±ÿ£ÿ©", "ÿ∑ŸÅŸÑ", "ÿπŸäŸÜ", "ŸäÿØ", "ÿ±ÿ£ÿ≥", "ŸÇÿØŸÖ", "ÿ≥ŸÖÿßÿ°",
    "ÿ£ÿ±ÿ∂", "ÿ®ÿ≠ÿ±", "ŸÜÿßÿ±", "ÿ¥ŸÖÿ≥", "ŸÇŸÖÿ±", "ŸÜÿ¨ŸÖ", "ÿ®Ÿäÿ™", "ŸÖÿØŸäŸÜÿ©", "ÿ¥ÿßÿ±ÿπ", "ÿ≥Ÿäÿßÿ±ÿ©",
    
    # German
    "Zeit", "Jahr", "Mensch", "Tag", "Mann", "Frau", "Kind", "Hand", "Auge", "Weg",
    "Freund", "Haus", "Auto", "Arbeit", "Stadt", "Leben", "Problem", "Moment", "Land", "Platz",
    
    # Portuguese
    "coisa", "tempo", "vida", "dia", "m√£o", "ano", "olho", "vez", "homem", "parte",
    "mulher", "lugar", "trabalho", "semana", "problema", "ponto", "hora", "pessoa", "forma", "caso",
    
    # Italian
    "anno", "giorno", "uomo", "volta", "vita", "mano", "occhio", "donna", "casa", "mondo",
    "tempo", "modo", "parte", "amico", "persona", "problema", "notte", "punto", "cuore", "padre"
]


def run(num_videos: int):
    telemetry = []

    with sync_playwright() as p:
        browser = p.firefox.launch(headless=False)
        page    = browser.new_page()

        for i in range(num_videos):
            print(f"\n‚ñ∂Ô∏è  Video {i+1}/{num_videos}")

            # 1) pick and search a random noun
            query = random.choice(nouns)
            page.goto(f"https://www.youtube.com/results?search_query={query}")
            page.wait_for_load_state("networkidle")

            # 2) click the first video result
            first = page.locator("a#video-title").first
            href  = first.get_attribute("href")
            if not href or not href.startswith("/watch?v="):
                print("  ‚ö†Ô∏è no video found for", query)
                continue
            video_url = "https://www.youtube.com" + href
            page.goto(video_url)
            page.wait_for_selector("video")
            print("  üé¨ opened:", video_url)

                        # 4) open Stats for nerds
            # Right-click on video to bring up context menu
            video = page.locator("#player")
            video.wait_for()
            box = video.bounding_box()
            page.mouse.click(box["x"] + box["width"] / 2, box["y"] + box["height"] / 2, button="right")
            time.sleep(1)

            stats = []
            # Click on "Stats for nerds"
            nerds = page.get_by_text("Stats for nerds")
            if nerds.is_visible():
                nerds.click()
                panel = page.wait_for_selector(".html5-video-info-panel", timeout=5000)
            else:
                print("Stats for nerds not found.")
                return

            # 3) get the full duration of the video
            duration = page.evaluate("() => document.querySelector('video').duration")
            # pick a random watch time between 0 and full duration
            watch_time = random.uniform(0, duration)
            print(f"  ‚è± watching for {watch_time:.1f}s out of {duration:.1f}s")
            #page.wait_for_timeout(watch_time * 1000)

            start = time.time()
            while time.time() - start < watch_time:
                # re-evaluate innerText each loop
                vid_stats = page.evaluate(
                    "() => document.querySelector('.html5-video-info-panel').innerText"
                )
                stats.append(vid_stats)
                print("   ‚Ä¢", stats[0])  # just preview first line
                time.sleep(1)


            # 5) record telemetry
            telemetry.append({
                "video_url": video_url,
                "query": query,
                "duration": duration,
                "watched": watch_time,
                "stats": stats
            })

            # optional small pause between iterations
            time.sleep(1)

        browser.close()

    # 6) output results
    print("\nüíæ Collected telemetry for", len(telemetry), "videos")
    print(json.dumps(telemetry, indent=2))

    # optionally write to file
    with open("telemetry.json", "w", encoding="utf-8") as f:
        json.dump(telemetry, f, indent=2, ensure_ascii=False)

if __name__ == "__main__":
    n = int(input("How many random videos should I process? "))
    run(n)
